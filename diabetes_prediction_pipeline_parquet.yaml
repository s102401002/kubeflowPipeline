# PIPELINE DEFINITION
# Name: diabetes-prediction-pipeline
# Description: Using kubeflow pipeline to train and evaluate a diabetes prediction model
# Outputs:
#    Output: str
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        x_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        load_data_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        x_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        x_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        x_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        train_model_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'joblib==1.4.2' 'pyarrow==15.0.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(model_path: InputPath(), x_test: InputPath(),\
          \ y_test: InputPath()) -> str:\n    import pandas as pd\n    import pyarrow.parquet\
          \ as pq\n    import joblib\n\n    model = joblib.load(filename=model_path)\n\
          \    x_test_df = pq.read_table(x_test).to_pandas()\n    y_test_df = pq.read_table(y_test).to_pandas()\n\
          \n    accuracy = model.score(x_test_df, y_test_df)\n\n    return f'Test\
          \ accuracy: {accuracy}'\n\n"
        image: python:3.9
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'numpy==2.0.0' 'requests==2.32.3' 'pyarrow==15.0.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(load_data_output: OutputPath()):\n    import pandas\
          \ as pd\n    import numpy as np\n    import io\n    import requests\n  \
          \  import pyarrow as pa\n    import pyarrow.parquet as pq\n\n    url = \"\
          https://raw.githubusercontent.com/daniel88516/diabetes-data/main/10k.csv\"\
          \n    s = requests.get(url).content\n    df_data = pd.read_csv(io.StringIO(s.decode('utf-8')))\n\
          \    df_data.drop(df_data[df_data['diabetes'] == 'No Info'].index, inplace=True)\n\
          \    df_data = df_data[['gender','age', 'bmi', 'HbA1c_level', 'blood_glucose_level',\
          \ 'diabetes']]\n    df_data.dropna(thresh=4, inplace=True)\n\n    gender_map\
          \ = {'Male':0 , 'Female':1  , 'Other':2}\n    df_data['gender'] = df_data['gender'].map(gender_map)\n\
          \    df_data = df_data[df_data['gender'] != 2]\n    df_data['age'] = pd.to_numeric(df_data['age'].replace('No\
          \ Info', np.nan), errors='coerce')\n    df_data['bmi'] = pd.to_numeric(df_data['bmi'].replace('No\
          \ Info', np.nan), errors='coerce')\n    df_data['HbA1c_level'] = pd.to_numeric(df_data['HbA1c_level'].replace('No\
          \ Info', np.nan), errors='coerce')\n    df_data['blood_glucose_level'] =\
          \ pd.to_numeric(df_data['blood_glucose_level'].replace('No Info', np.nan),\
          \ errors='coerce')\n\n    df_data = df_data.fillna(df_data.mean())\n\n \
          \   # \u8F49\u63DB\u70BA Parquet \u683C\u5F0F\n    table = pa.Table.from_pandas(df_data)\n\
          \    pq.write_table(table, load_data_output)\n\n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'pyarrow==15.0.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(data: InputPath(), x_train_output: OutputPath(),\
          \ x_test_output: OutputPath(), y_train_output: OutputPath(), y_test_output:\
          \ OutputPath()):\n    import pandas as pd\n    import pyarrow.parquet as\
          \ pq\n    from sklearn.model_selection import train_test_split\n\n    df_data\
          \ = pq.read_table(data).to_pandas()\n    x = df_data.drop(labels=['diabetes'],\
          \ axis=1)\n    y = df_data[['diabetes']]\n\n    x_train, x_test, y_train,\
          \ y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n  \
          \  pq.write_table(pa.Table.from_pandas(x_train), x_train_output)\n    pq.write_table(pa.Table.from_pandas(x_test),\
          \ x_test_output)\n    pq.write_table(pa.Table.from_pandas(y_train), y_train_output)\n\
          \    pq.write_table(pa.Table.from_pandas(y_test), y_test_output)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'pyarrow==15.0.0' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(x_train: InputPath(), y_train: InputPath(), train_model_output:\
          \ OutputPath()):\n    import pandas as pd\n    import pyarrow.parquet as\
          \ pq\n    from sklearn.linear_model import LogisticRegression\n    import\
          \ joblib\n\n    x_train = pq.read_table(x_train).to_pandas()\n    y_train\
          \ = pq.read_table(y_train).to_pandas()\n\n    model = LogisticRegression(random_state=0,\
          \ max_iter=100) # 100 times for test p.s. it is 10000 times in beginning\n\
          \    model.fit(x_train, y_train.values.ravel())\n\n    joblib.dump(model,\
          \ train_model_output)\n\n"
        image: python:3.9
pipelineInfo:
  description: Using kubeflow pipeline to train and evaluate a diabetes prediction
    model
  name: diabetes-prediction-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: evaluate-model
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - prepare-data
        - train-model
        inputs:
          artifacts:
            model_path:
              taskOutputArtifact:
                outputArtifactKey: train_model_output
                producerTask: train-model
            x_test:
              taskOutputArtifact:
                outputArtifactKey: x_test_output
                producerTask: prepare-data
            y_test:
              taskOutputArtifact:
                outputArtifactKey: y_test_output
                producerTask: prepare-data
        taskInfo:
          name: evaluate-model
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data:
              taskOutputArtifact:
                outputArtifactKey: load_data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            x_train:
              taskOutputArtifact:
                outputArtifactKey: x_train_output
                producerTask: prepare-data
            y_train:
              taskOutputArtifact:
                outputArtifactKey: y_train_output
                producerTask: prepare-data
        taskInfo:
          name: train-model
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
